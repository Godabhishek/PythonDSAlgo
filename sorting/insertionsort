#
#efficiency - O(n^2)
#input of size - n^2
# 10 - 100
# 100 - 10^4
# 1000 - 10^6
# 10^4 - 10^8
# remember 10^7 ~ 1 sec in python

# behaviour similar to selection sort as it is n^2. however, if the list if already sorted out fully / partially, the efficiency is much better in 
# insertion sort, as we just compare the values to the left and move on. no insertion happens. in case of selection sort, we have to check for 
# min value regardless of the state of the input list if ordered or not.
# in case of insertin sort of size 5000 / 10000 also in an arranged list, response will be quicker unlike in selection sort.
# behaviour is similar in case of completely shuffled list

def insertionsort(l):
    for sliceend in range(len(l)):
        pos = sliceend

        while ((pos > 0) and l[pos] < l[pos-1]):
            (l[pos],l[pos-1]) = (l[pos-1],l[pos])
            pos = pos -1


